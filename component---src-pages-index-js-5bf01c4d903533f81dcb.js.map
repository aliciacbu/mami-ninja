{"version":3,"sources":["webpack:///./content/images/ninja.png","webpack:///./src/utils/helpers.js","webpack:///./src/pages/index.js","webpack:///./src/components/Posts.js","webpack:///./src/components/Tags.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["module","exports","getSimplifiedPosts","posts","options","map","post","id","node","date","frontmatter","slug","fields","tags","title","banner","slugify","string","match","x","toLowerCase","join","BlogIndex","latest","data","edges","simplifiedLatest","useMemo","Section","children","button","props","className","to","Layout","Helmet","config","siteTitle","SEO","src","ninja","alt","Posts","withDate","pageQuery","Cell","Date","oneMonthAgo","setMonth","getMonth","isNew","key","showYears","postsByYear","forEach","year","split","years","Object","keys","reverse","colors","Tags","tag","style","color","Math","floor","random","length","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","indexOf"],"mappings":"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","file":"component---src-pages-index-js-5bf01c4d903533f81dcb.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/ninja-801bc5f303d92ca21e257b62e5e65786.png\";","export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    title: post.node.frontmatter.title,\n    banner: post.node.frontmatter.banner,\n  }))\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    string\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n","import React, { useMemo } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../components/Layout'\nimport Posts from '../components/Posts'\nimport Projects from '../components/Projects'\nimport SEO from '../components/SEO'\n\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nimport projects from '../data/projects'\n\nimport ninja from '../../content/images/ninja.png'\n\nexport default function BlogIndex({ data }) {\n  const latest = data.latest.edges\n  const simplifiedLatest = useMemo(() => getSimplifiedPosts(latest), [latest])\n\n  const Section = ({ title, children, button, ...props }) => (\n    <section {...props}>\n      <h2>\n        {title}\n        {button && (\n          <Link className=\"section-button\" to=\"/blog\">\n            Ver todas\n          </Link>\n        )}\n      </h2>\n      {children}\n    </section>\n  )\n\n  return (\n    <Layout>\n      <Helmet title={config.siteTitle} />\n      <SEO />\n      <section className=\"lead\">\n        <div className=\"container\">\n          <div className=\"copy\">\n            <h1>Hola!ðŸ‘‹ Soy Mami Ninja!</h1>\n            <p>\n              Soy una mamÃ¡ en constante aprendizaje. En este blog comparto todo lo que voy{' '}\n              <Link to=\"/recursos\">aprendiendo</Link> asÃ­ como{' '} <Link to=\"/reflexiones\">reflexiones personales</Link>.\n            </p>\n          </div>\n\n          <div className=\"image\">\n            <img src={ninja} alt=\"Mami Ninja\" />\n          </div>\n        </div>\n      </section>\n      <div className=\"container index\">\n        <Section title=\"Ãšltimas entradas\" button>\n          <Posts data={simplifiedLatest} tags withDate />\n        </Section>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\nquery IndexQuery {\n  latest: allMarkdownRemark(limit: 10, sort: {fields: [frontmatter___date], order: DESC}, filter: {frontmatter: {template: {eq: \"post\"}}, isFuture: {eq: false}, fields: {draft: {eq: false}}}) {\n    edges {\n      node {\n        id\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          tags\n        }\n      }\n    }\n  }\n}\n`\n","import React, { useMemo } from 'react'\nimport { Link } from 'gatsby'\nimport Tags from '../components/Tags'\n\nconst Cell = ({ node, tags, withDate }) => {\n  const date = new Date(node.date)\n  const oneMonthAgo = new Date()\n  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)\n  let isNew = false\n\n  if (date > oneMonthAgo) {\n    isNew = true\n  }\n\n  return (\n    <div className={`row ${!withDate ? 'narrow' : ''}`} key={node.id}>\n      <Link to={node.slug} className=\"cell\">\n        {isNew && <div className=\"new-post\">Nueva!</div>}\n        <div>\n          {withDate && <time>{node.date}</time>}\n          <div>{node.title}</div>\n        </div>\n      </Link>\n      {tags && <Tags tags={node.tags} />}\n    </div>\n  )\n}\n\nexport default function Posts({ data, tags, showYears, withDate }) {\n  const postsByYear = {}\n\n  data.forEach((post) => {\n    const year = post.date.split(', ')[1]\n\n    postsByYear[year] = [...(postsByYear[year] || []), post]\n  })\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year}>\n        <h2>{year}</h2>\n        <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n          {postsByYear[year].map((node) => (\n            <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n        {data.map((node) => (\n          <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n        ))}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { slugify } from '../utils/helpers'\n\nconst colors = [\n  '#37b24d',\n  '#f03e3e',\n  '#10a2f5',\n  '#E8AC2A',\n  '#fd7e14',\n  '#1c7ed6',\n  '#7950f2',\n]\n\nfunction getRandomColor() {\n  return colors[Math.floor(Math.random() * colors.length)]\n}\n\nexport default function Tags({ tags }) {\n  return (\n    <div className=\"cell tags\">\n      {tags ? tags.map((tag) => (\n        <Link\n          key={tag}\n          to={`/tags/${slugify(tag)}`}\n          style={{\n            color: getRandomColor(),\n          }}\n        >\n          #{tag}\n        </Link>\n      )) : null}\n    </div>\n  )\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}