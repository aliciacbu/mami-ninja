{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/pages/reflexiones.js","webpack:///./src/components/Posts.js","webpack:///./src/components/Tags.js"],"names":["getSimplifiedPosts","posts","options","map","post","id","node","date","frontmatter","slug","fields","tags","title","banner","slugify","string","match","x","toLowerCase","join","BlogIndex","data","allMarkdownRemark","edges","simplifiedPosts","useMemo","config","siteTitle","customDescription","className","showYears","withDate","narrow","pageQuery","Cell","Date","oneMonthAgo","setMonth","getMonth","isNew","key","to","Posts","postsByYear","forEach","year","split","years","Object","keys","reverse","colors","Tags","tag","style","color","Math","floor","random","length"],"mappings":"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","file":"component---src-pages-reflexiones-js-71643e1f0d01f21636d9.js","sourcesContent":["export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    title: post.node.frontmatter.title,\n    banner: post.node.frontmatter.banner,\n  }))\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    string\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../components/Layout'\nimport Posts from '../components/Posts'\nimport SEO from '../components/SEO'\n\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nexport default function BlogIndex({ data }) {\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n\n  return (\n    <Layout>\n      <Helmet title={`Reflexiones | ${config.siteTitle}`} />\n      <SEO customDescription=\"Mi opinión personal\" />\n      <header>\n        <div className=\"container text-center\">\n          <h1>Reflexiones</h1>\n          <p className=\"subtitle\">Mi opinión personal</p>\n        </div>\n      </header>\n      <section>\n        <div className=\"guides-section\">\n          <div className=\"container\">\n            <Posts data={simplifiedPosts} showYears withDate narrow />\n          </div>\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query Reflexiones {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { categories: { in: \"Reflexiones\" } }\n        isFuture: { eq: false }\n        fields: { draft: { eq: false } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            banner\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useMemo } from 'react'\nimport { Link } from 'gatsby'\nimport Tags from '../components/Tags'\n\nconst Cell = ({ node, tags, withDate }) => {\n  const date = new Date(node.date)\n  const oneMonthAgo = new Date()\n  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)\n  let isNew = false\n\n  if (date > oneMonthAgo) {\n    isNew = true\n  }\n\n  return (\n    <div className={`row ${!withDate ? 'narrow' : ''}`} key={node.id}>\n      <Link to={node.slug} className=\"cell\">\n        {isNew && <div className=\"new-post\">Nueva!</div>}\n        <div>\n          {withDate && <time>{node.date}</time>}\n          <div>{node.title}</div>\n        </div>\n      </Link>\n      {tags && <Tags tags={node.tags} />}\n    </div>\n  )\n}\n\nexport default function Posts({ data, tags, showYears, withDate }) {\n  const postsByYear = {}\n\n  data.forEach((post) => {\n    const year = post.date.split(', ')[1]\n\n    postsByYear[year] = [...(postsByYear[year] || []), post]\n  })\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year}>\n        <h2>{year}</h2>\n        <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n          {postsByYear[year].map((node) => (\n            <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n        {data.map((node) => (\n          <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n        ))}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { slugify } from '../utils/helpers'\n\nconst colors = [\n  '#37b24d',\n  '#f03e3e',\n  '#10a2f5',\n  '#E8AC2A',\n  '#fd7e14',\n  '#1c7ed6',\n  '#7950f2',\n]\n\nfunction getRandomColor() {\n  return colors[Math.floor(Math.random() * colors.length)]\n}\n\nexport default function Tags({ tags }) {\n  return (\n    <div className=\"cell tags\">\n      {tags ? tags.map((tag) => (\n        <Link\n          key={tag}\n          to={`/tags/${slugify(tag)}`}\n          style={{\n            color: getRandomColor(),\n          }}\n        >\n          #{tag}\n        </Link>\n      )) : null}\n    </div>\n  )\n}\n"],"sourceRoot":""}